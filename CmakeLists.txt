cmake_minimum_required(VERSION 3.5)
#project(darknet)
#SET(MY_TARGET demo)
#
##当前目录的文件
#AUX_SOURCE_DIRECTORY(./src SRC_LIST)
##添加子目录
#ADD_EXECUTABLE(${MY_TARGET} ${SRC_LIST})

PROJECT(DARKNET)
SET(DARKNET_VERSION_MAJOR 0)
SET(DARKNET_VERSION_MINOR 1)
SET(ASM_OPTIONS "-x assembler-with-cpp")
SET(CMAKE_ASM_FLAGS "${CFLAGS} ${ASM_OPTIONS}" )
ENABLE_LANGUAGE(C ASM)
OPTION(WITH_DEBUG "DEBUG" OFF)
OPTION(WITH_OPENCV "OPENCV" OFF)
OPTION(WITH_CUDA "CUDA" OFF)
OPTION(WITH_CUDNN "CUDNN" OFF)
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -L/usr/local/cuda/lib64 -D_FORCE_INLINES")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -L/usr/local/cuda/lib64 -D_FORCE_INLINES")
IF(WITH_OPENCV)
    FIND_PACKAGE(OpenCV)
    IF(OPENCV_FOUND)
        INCLUDE_DIRECTORIES(${OpenCV_INCLUDE_DIRS})
        LINK_DIRECTORIES(${OpenCV_LIBS})
    ENDIF()
ENDIF()
FILE(GLOB DARKNET_CPU_SOURCES "src/*.c" "src/*.h")
INCLUDE_DIRECTORIES("./include/")
ADD_LIBRARY(darknet_cpu STATIC
        ${DARKNET_CPU_SOURCES}
        "include/darknet.h"
        )
#ADD_EXECUTABLE(darknet  "examples/darknet.c")

FIND_PACKAGE(CUDA)
IF(CUDA_FOUND AND WITH_CUDA)
    INCLUDE_DIRECTORIES(${CUDA_INCLUDE_DIRS})
    LINK_DIRECTORIES(${CUDA_LIBRARIES} ${CUDA_LIBRARY_DIRS})
    #Compile the main library
    SET(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS};
            -Xcompiler -fPIC
            -DCUDNN
            -lcudart
            -lcudnn
            )
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DCUDNN")
    IF(OPTIMIZE)
        SET(CUDA_NVCC_FLAGS ${CUDA_NVCC_FLAGS}; -O3)
    ENDIF()
    FILE(GLOB DARKNET_CUDA_SOURCES "src/*.cu")
    CUDA_ADD_LIBRARY(darknet_cuda
            ${DARKNET_CUDA_SOURCES}
            )
    CUDA_ADD_CUBLAS_TO_TARGET(darknet_cuda)
    TARGET_LINK_LIBRARIES(darknet_cpu darknet_cuda ${CUDNN_LIBRARY} cudnn ${CUDA_LIBRARIES})
ENDIF()